/**
 * @file class1/deferred/aoUtil.glsl
 *
 * $LicenseInfo:firstyear=2007&license=viewerlgpl$
 * Second Life Viewer Source Code
 * Copyright (C) 2007, Linden Research, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation;
 * version 2.1 of the License only.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * Linden Research, Inc., 945 Battery Street, San Francisco, CA  94111  USA
 * $/LicenseInfo$
 */

uniform sampler2D   noiseMap;
uniform sampler2D   depthMap;

uniform float ssao_radius;
uniform float ssao_max_radius;
uniform float ssao_factor;
uniform float ssao_factor_inv;
uniform float ssao_sample_count; // <FS:WWeaver> New uniform for SSAO sample count
uniform mat4 inv_proj;
uniform vec2 screen_res;

vec2 getScreenCoordinateAo(vec2 screenpos)
{
    vec2 sc = screenpos.xy * 2.0;
    return sc - vec2(1.0, 1.0);
}

float getDepthAo(vec2 pos_screen)
{
    float depth = texture(depthMap, pos_screen).r;
    return depth;
}

vec4 getPositionAo(vec2 pos_screen)
{
    float depth = getDepthAo(pos_screen);
    vec2 sc = getScreenCoordinateAo(pos_screen);
    vec4 ndc = vec4(sc.x, sc.y, 2.0*depth-1.0, 1.0);
    vec4 pos = inv_proj * ndc;
    pos /= pos.w;
    pos.w = 1.0;
    return pos;
}

vec2 getKern(int i)
{
    vec2 kern[1024];
    // exponentially (^2) distant occlusion samples spread around origin
    kern[0]   = vec2(-1.0, 0.0)       * 0.125*0.125;
    kern[1]   = vec2(1.0, 0.0)        * 0.250*0.250;
    kern[2]   = vec2(0.0, 1.0)        * 0.375*0.375;
    kern[3]   = vec2(0.0, -1.0)       * 0.500*0.500;
    kern[4]   = vec2(0.7071, 0.7071)   * 0.625*0.625;
    kern[5]   = vec2(-0.7071, -0.7071)  * 0.750*0.750;
    kern[6]   = vec2(-0.7071, 0.7071)  * 0.875*0.875;
    kern[7]   = vec2(0.7071, -0.7071)   * 1.000*1.000;

    kern[8]   = vec2(1.0, 0.3)        * 1.125*1.125;
    kern[9]   = vec2(-0.3, -1.0)      * 1.250*1.250;
    kern[10]  = vec2(-0.8, 0.8)       * 1.375*1.375;
    kern[11]  = vec2(0.8, -0.8)       * 1.500*1.500;
    kern[12]  = vec2(0.5, 0.9)        * 1.625*1.625;
    kern[13]  = vec2(-0.9, -0.5)      * 1.750*1.750;
    kern[14]  = vec2(-0.6, 0.7)       * 1.875*1.875;
    kern[15]  = vec2(0.6, -0.7)       * 2.000*2.000;

    kern[16]  = vec2(1.0, 0.05)       * 2.125*2.125;
    kern[17]  = vec2(-0.05, -1.0)     * 2.250*2.250;
    kern[18]  = vec2(-0.95, 0.1)      * 2.375*2.375;
    kern[19]  = vec2(0.1, -0.95)      * 2.500*2.500;
    kern[20]  = vec2(0.3, 0.9)        * 2.625*2.625;
    kern[21]  = vec2(-0.9, -0.3)      * 2.750*2.750;
    kern[22]  = vec2(-0.8, 0.2)       * 2.875*2.875;
    kern[23]  = vec2(0.2, -0.8)       * 3.000*3.000;

    kern[24]  = vec2(1.0, 0.05)       * 3.125*3.125; // Repeating some directions with larger radii
    kern[25]  = vec2(-0.05, -1.0)     * 3.250*3.250;
    kern[26]  = vec2(-0.95, 0.1)      * 3.375*3.375;
    kern[27]  = vec2(0.1, -0.95)      * 3.500*3.500;
    kern[28]  = vec2(0.3, 0.9)        * 3.625*3.625;
    kern[29]  = vec2(-0.9, -0.3)      * 3.750*3.750;
    kern[30]  = vec2(-0.8, 0.2)       * 3.875*3.875;
    kern[31]  = vec2(0.2, -0.8)       * 4.000*4.000;

    // --- Continuation for samples 32 to 63 ---
    kern[32]  = vec2(0.9, 0.4)        * 4.125*4.125; // New directions, continuing to spread out
    kern[33]  = vec2(-0.4, -0.9)      * 4.250*4.250;
    kern[34]  = vec2(-0.7, 0.6)       * 4.375*4.375;
    kern[35]  = vec2(0.7, -0.6)       * 4.500*4.500;
    kern[36]  = vec2(0.85, 0.55)      * 4.625*4.625;
    kern[37]  = vec2(-0.55, -0.85)     * 4.750*4.750;
    kern[38]  = vec2(-0.65, 0.65)     * 4.875*4.875;
    kern[39]  = vec2(0.65, -0.65)     * 5.000*5.000;

    kern[40]  = vec2(1.0, 0.1)        * 5.125*5.125; // Closer to axes again, but further out
    kern[41]  = vec2(-0.1, -1.0)      * 5.250*5.250;
    kern[42]  = vec2(-0.9, 0.2)       * 5.375*5.375;
    kern[43]  = vec2(0.2, -0.9)       * 5.500*5.500;
    kern[44]  = vec2(0.4, 0.9)        * 5.625*5.625;
    kern[45]  = vec2(-0.9, -0.4)      * 5.750*5.750;
    kern[46]  = vec2(-0.7, 0.3)       * 5.875*5.875;
    kern[47]  = vec2(0.3, -0.7)       * 6.000*6.000;

    kern[48]  = vec2(0.95, 0.25)      * 6.125*6.125; // Even more subtle directions
    kern[49]  = vec2(-0.25, -0.95)     * 6.250*6.250;
    kern[50]  = vec2(-0.85, 0.35)     * 6.375*6.375;
    kern[51]  = vec2(0.35, -0.85)     * 6.500*6.500;
    kern[52]  = vec2(0.55, 0.85)      * 6.625*6.625;
    kern[53]  = vec2(-0.85, -0.55)     * 6.750*6.750;
    kern[54]  = vec2(-0.75, 0.45)     * 6.875*6.875;
    kern[55]  = vec2(0.45, -0.75)     * 7.000*7.000;

    kern[56]  = vec2(1.0, 0.02)       * 7.125*7.125; // Back to near axes, even further
    kern[57]  = vec2(-0.02, -1.0)      * 7.250*7.250;
    kern[58]  = vec2(-0.98, 0.05)     * 7.375*7.375;
    kern[59]  = vec2(0.05, -0.98)     * 7.500*7.500;
    kern[60]  = vec2(0.25, 0.95)      * 7.625*7.625;
    kern[61]  = vec2(-0.95, -0.25)     * 7.750*7.750;
    kern[62]  = vec2(-0.85, 0.15)     * 7.875*7.875;
    kern[63]  = vec2(0.15, -0.85)     * 8.000*8.000;

    // --- Continuation for samples 64 to 95 ---
    kern[64]  = vec2(0.92, 0.38)      * 8.125*8.125; // More in-between directions, finer steps
    kern[65]  = vec2(-0.38, -0.92)     * 8.250*8.250;
    kern[66]  = vec2(-0.68, 0.62)     * 8.375*8.375;
    kern[67]  = vec2(0.62, -0.68)     * 8.500*8.500;
    kern[68]  = vec2(0.88, 0.42)      * 8.625*8.625;
    kern[69]  = vec2(-0.42, -0.88)     * 8.750*8.750;
    kern[70]  = vec2(-0.63, 0.67)     * 8.875*8.875;
    kern[71]  = vec2(0.67, -0.63)     * 9.000*9.000;

    kern[72]  = vec2(1.0, 0.08)       * 9.125*9.125; // Closer to axes again, but even further out
    kern[73]  = vec2(-0.08, -1.0)      * 9.250*9.250;
    kern[74]  = vec2(-0.92, 0.18)     * 9.375*9.375;
    kern[75]  = vec2(0.18, -0.92)     * 9.500*9.500;
    kern[76]  = vec2(0.35, 0.93)      * 9.625*9.625;
    kern[77]  = vec2(-0.93, -0.35)     * 9.750*9.750;
    kern[78]  = vec2(-0.78, 0.22)     * 9.875*9.875;
    kern[79]  = vec2(0.22, -0.78)     * 10.000*10.000;

    kern[80]  = vec2(0.97, 0.28)      * 10.125*10.125; // Even finer directions
    kern[81]  = vec2(-0.28, -0.97)     * 10.250*10.250;
    kern[82]  = vec2(-0.82, 0.48)     * 10.375*10.375;
    kern[83]  = vec2(0.48, -0.82)     * 10.500*10.500;
    kern[84]  = vec2(0.65, 0.75)      * 10.625*10.625;
    kern[85]  = vec2(-0.75, -0.65)     * 10.750*10.750;
    kern[86]  = vec2(-0.70, 0.50)     * 10.875*10.875;
    kern[87]  = vec2(0.50, -0.70)     * 11.000*11.000;

    kern[88]  = vec2(1.0, 0.01)       * 11.125*11.125; // Back to very near axes, furthest out
    kern[89]  = vec2(-0.01, -1.0)      * 11.250*11.250;
    kern[90]  = vec2(-0.99, 0.03)     * 11.375*11.375;
    kern[91]  = vec2(0.03, -0.99)     * 11.500*11.500;
    kern[92]  = vec2(0.20, 0.98)      * 11.625*11.625;
    kern[93]  = vec2(-0.98, -0.20)     * 11.750*11.750;
    kern[94]  = vec2(-0.90, 0.10)     * 11.875*11.875;
    kern[95]  = vec2(0.10, -0.90)     * 12.000*12.000;

    // --- Continuation for samples 96 to 127 --- (and the last one to reach 128)
    kern[96]  = vec2(0.94, 0.33)      * 12.125*12.125; // Even finer in-between directions, even further
    kern[97]  = vec2(-0.33, -0.94)     * 12.250*12.250;
    kern[98]  = vec2(-0.72, 0.58)     * 12.375*12.375;
    kern[99]  = vec2(0.58, -0.72)     * 12.500*12.500;
    kern[100] = vec2(0.86, 0.46)     * 12.625*12.625;
    kern[101] = vec2(-0.46, -0.86)    * 12.750*12.750;
    kern[102] = vec2(-0.66, 0.64)    * 12.875*12.875;
    kern[103] = vec2(0.64, -0.66)    * 13.000*13.000;

    kern[104] = vec2(1.0, 0.06)      * 13.125*13.125; // Closer to axes again, very far out
    kern[105] = vec2(-0.06, -1.0)     * 13.250*13.250;
    kern[106] = vec2(-0.94, 0.14)    * 13.375*13.375;
    kern[107] = vec2(0.14, -0.94)    * 13.500*13.500;
    kern[108] = vec2(0.38, 0.92)     * 13.625*13.625;
    kern[109] = vec2(-0.92, -0.38)    * 13.750*13.750;
    kern[110] = vec2(-0.82, 0.18)    * 13.875*13.875;
    kern[111] = vec2(0.18, -0.82)    * 14.000*14.000;

    kern[112] = vec2(0.96, 0.30)     * 14.125*14.125; // Even finer directions, extremely far
    kern[113] = vec2(-0.30, -0.96)    * 14.250*14.250;
    kern[114] = vec2(-0.71, 0.59)    * 14.375*14.375;
    kern[115] = vec2(0.59, -0.71)    * 14.500*14.500;
    kern[116] = vec2(0.87, 0.44)     * 14.625*14.625;
    kern[117] = vec2(-0.44, -0.87)    * 14.750*14.750;
    kern[118] = vec2(-0.67, 0.63)    * 14.875*14.875;
    kern[119] = vec2(0.63, -0.67)    * 15.000*15.000;

    kern[120] = vec2(1.0, 0.005)     * 15.125*15.125; // Very close to axes, very very far
    kern[121] = vec2(-0.005, -1.0)    * 15.250*15.250;
    kern[122] = vec2(-0.995, 0.01)   * 15.375*15.375;
    kern[123] = vec2(0.01, -0.995)   * 15.500*15.500;
    kern[124] = vec2(0.15, 0.99)     * 15.625*15.625;
    kern[125] = vec2(-0.99, -0.15)    * 15.750*15.750;
    kern[126] = vec2(-0.95, 0.05)    * 15.875*15.875;
    kern[127] = vec2(0.05, -0.95)    * 16.000*16.000; // Last sample for 128

    // --- Continuation for samples 128 to 159 ---
    kern[128] = vec2(0.95, 0.32)     * 16.125*16.125; // Even finer in-between directions, extremely far
    kern[129] = vec2(-0.32, -0.95)    * 16.250*16.250;
    kern[130] = vec2(-0.73, 0.57)    * 16.375*16.375;
    kern[131] = vec2(0.57, -0.73)    * 16.500*16.500;
    kern[132] = vec2(0.85, 0.48)     * 16.625*16.625;
    kern[133] = vec2(-0.48, -0.85)    * 16.750*16.750;
    kern[134] = vec2(-0.64, 0.66)    * 16.875*16.875;
    kern[135] = vec2(0.66, -0.64)    * 17.000*17.000;

    kern[136] = vec2(1.0, 0.04)      * 17.125*17.125; // Closer to axes again, very far out
    kern[137] = vec2(-0.04, -1.0)     * 17.250*17.250;
    kern[138] = vec2(-0.96, 0.12)    * 17.375*17.375;
    kern[139] = vec2(0.12, -0.96)    * 17.500*17.500;
    kern[140] = vec2(0.36, 0.93)     * 17.625*17.625;
    kern[141] = vec2(-0.93, -0.36)    * 17.750*17.750;
    kern[142] = vec2(-0.81, 0.19)    * 17.875*17.875;
    kern[143] = vec2(0.19, -0.81)    * 18.000*18.000;

    kern[144] = vec2(0.98, 0.26)     * 18.125*18.125; // Even finer directions, extremely far
    kern[145] = vec2(-0.26, -0.98)    * 18.250*18.250;
    kern[146] = vec2(-0.83, 0.47)    * 18.375*18.375;
    kern[147] = vec2(0.47, -0.83)    * 18.500*18.500;
    kern[148] = vec2(0.66, 0.74)     * 18.625*18.625;
    kern[149] = vec2(-0.74, -0.66)    * 18.750*18.750;
    kern[150] = vec2(-0.69, 0.51)    * 18.875*18.875;
    kern[151] = vec2(0.51, -0.69)    * 19.000*19.000;

    kern[152] = vec2(1.0, 0.008)     * 19.125*19.125; // Very close to axes, very very far
    kern[153] = vec2(-0.008, -1.0)    * 19.250*19.250;
    kern[154] = vec2(-0.992, 0.02)   * 19.375*19.375;
    kern[155] = vec2(0.02, -0.992)   * 19.500*19.500;
    kern[156] = vec2(0.18, 0.99)     * 19.625*19.625;
    kern[157] = vec2(-0.99, -0.18)    * 19.750*19.750;
    kern[158] = vec2(-0.93, 0.07)    * 19.875*19.875;
    kern[159] = vec2(0.07, -0.93)    * 20.000*20.000;

    // --- Continuation for samples 160 to 191 ---
    kern[160] = vec2(0.96, 0.31)     * 20.125*20.125; // Even finer in-between directions, extremely far
    kern[161] = vec2(-0.31, -0.96)    * 20.250*20.250;
    kern[162] = vec2(-0.72, 0.585)   * 20.375*20.375;
    kern[163] = vec2(0.585, -0.72)   * 20.500*20.500;
    kern[164] = vec2(0.84, 0.49)     * 20.625*20.625;
    kern[165] = vec2(-0.49, -0.84)    * 20.750*20.750;
    kern[166] = vec2(-0.65, 0.655)   * 20.875*20.875;
    kern[167] = vec2(0.655, -0.65)   * 21.000*21.000;

    kern[168] = vec2(1.0, 0.03)      * 21.125*21.125; // Closer to axes again, very far out
    kern[169] = vec2(-0.03, -1.0)     * 21.250*21.250;
    kern[170] = vec2(-0.97, 0.11)    * 21.375*21.375;
    kern[171] = vec2(0.11, -0.97)    * 21.500*21.500;
    kern[172] = vec2(0.37, 0.93)     * 21.625*21.625;
    kern[173] = vec2(-0.93, -0.37)    * 21.750*21.750;
    kern[174] = vec2(-0.80, 0.20)    * 21.875*21.875;
    kern[175] = vec2(0.20, -0.80)    * 22.000*22.000;

    kern[176] = vec2(0.99, 0.27)     * 22.125*22.125; // Even finer directions, extremely far
    kern[177] = vec2(-0.27, -0.99)    * 22.250*22.250;
    kern[178] = vec2(-0.84, 0.46)    * 22.375*22.375;
    kern[179] = vec2(0.46, -0.84)    * 22.500*22.500;
    kern[180] = vec2(0.67, 0.73)     * 22.625*22.625;
    kern[181] = vec2(-0.73, -0.67)    * 22.750*22.750;
    kern[182] = vec2(-0.68, 0.52)    * 22.875*22.875;
    kern[183] = vec2(0.52, -0.68)    * 23.000*23.000;

    kern[184] = vec2(1.0, 0.006)     * 23.125*23.125; // Very close to axes, very very far
    kern[185] = vec2(-0.006, -1.0)    * 23.250*23.250;
    kern[186] = vec2(-0.994, 0.015)  * 23.375*23.375;
    kern[187] = vec2(0.015, -0.994)  * 23.500*23.500;
    kern[188] = vec2(0.16, 0.99)     * 23.625*23.625;
    kern[189] = vec2(-0.99, -0.16)    * 23.750*23.750;
    kern[190] = vec2(-0.94, 0.06)    * 23.875*23.875;
    kern[191] = vec2(0.06, -0.94)    * 24.000*24.000;

    // --- Continuation for samples 192 to 223 ---
    kern[192] = vec2(0.97, 0.30)     * 24.125*24.125; // Even finer in-between directions, extremely far
    kern[193] = vec2(-0.30, -0.97)    * 24.250*24.250;
    kern[194] = vec2(-0.715, 0.58)   * 24.375*24.375;
    kern[195] = vec2(0.58, -0.715)   * 24.500*24.500;
    kern[196] = vec2(0.83, 0.50)     * 24.625*24.625;
    kern[197] = vec2(-0.50, -0.83)    * 24.750*24.750;
    kern[198] = vec2(-0.645, 0.65)   * 24.875*24.875;
    kern[199] = vec2(0.65, -0.645)   * 25.000*25.000;

    kern[200] = vec2(1.0, 0.025)     * 25.125*25.125; // Closer to axes again, very far out
    kern[201] = vec2(-0.025, -1.0)    * 25.250*25.250;
    kern[202] = vec2(-0.975, 0.10)   * 25.375*25.375;
    kern[203] = vec2(0.10, -0.975)   * 25.500*25.500;
    kern[204] = vec2(0.375, 0.92)    * 25.625*25.625;
    kern[205] = vec2(-0.92, -0.375)   * 25.750*25.750;
    kern[206] = vec2(-0.79, 0.21)    * 25.875*25.875;
    kern[207] = vec2(0.21, -0.79)    * 26.000*26.000;

    kern[208] = vec2(0.99, 0.28)     * 26.125*26.125; // Even finer directions, extremely far
    kern[209] = vec2(-0.28, -0.99)    * 26.250*26.250;
    kern[210] = vec2(-0.85, 0.45)    * 26.375*26.375;
    kern[211] = vec2(0.45, -0.85)    * 26.500*26.500;
    kern[212] = vec2(0.68, 0.72)     * 26.625*26.625;
    kern[213] = vec2(-0.72, -0.68)    * 26.750*26.750;
    kern[214] = vec2(-0.67, 0.53)    * 26.875*26.875;
    kern[215] = vec2(0.53, -0.67)    * 27.000*27.000;

    kern[216] = vec2(1.0, 0.004)     * 27.125*27.125; // Very close to axes, very very far
    kern[217] = vec2(-0.004, -1.0)    * 27.250*27.250;
    kern[218] = vec2(-0.996, 0.012)  * 27.375*27.375;
    kern[219] = vec2(0.012, -0.996)  * 27.500*27.500;
    kern[220] = vec2(0.17, 0.99)     * 27.625*27.625;
    kern[221] = vec2(-0.99, -0.17)    * 27.750*27.750;
    kern[222] = vec2(-0.945, 0.055)  * 27.875*27.875;
    kern[223] = vec2(0.055, -0.945)  * 28.000*28.000;

    // --- Continuation for samples 224 to 255 ---
    kern[224] = vec2(0.98, 0.29)     * 28.125*28.125; // Even finer in-between directions, extremely far
    kern[225] = vec2(-0.29, -0.98)    * 28.250*28.250;
    kern[226] = vec2(-0.718, 0.575)  * 28.375*28.375;
    kern[227] = vec2(0.575, -0.718)  * 28.500*28.500;
    kern[228] = vec2(0.82, 0.51)     * 28.625*28.625;
    kern[229] = vec2(-0.51, -0.82)    * 28.750*28.750;
    kern[230] = vec2(-0.648, 0.645)  * 28.875*28.875;
    kern[231] = vec2(0.645, -0.648)  * 29.000*29.000;

    kern[232] = vec2(1.0, 0.02)      * 29.125*29.125; // Closer to axes again, very far out
    kern[233] = vec2(-0.02, -1.0)     * 29.250*29.250;
    kern[234] = vec2(-0.98, 0.09)    * 29.375*29.375;
    kern[235] = vec2(0.09, -0.98)    * 29.500*29.500;
    kern[236] = vec2(0.38, 0.91)     * 29.625*29.625;
    kern[237] = vec2(-0.91, -0.38)    * 29.750*29.750;
    kern[238] = vec2(-0.785, 0.215)  * 29.875*29.875;
    kern[239] = vec2(0.215, -0.785)  * 30.000*30.000;

    kern[240] = vec2(0.995, 0.275)   * 30.125*30.125; // Even finer directions, extremely far
    kern[241] = vec2(-0.275, -0.995)  * 30.250*30.250;
    kern[242] = vec2(-0.86, 0.44)    * 30.375*30.375;
    kern[243] = vec2(0.44, -0.86)    * 30.500*30.500;
    kern[244] = vec2(0.69, 0.71)     * 30.625*30.625;
    kern[245] = vec2(-0.71, -0.69)    * 30.750*30.750;
    kern[246] = vec2(-0.665, 0.535)  * 30.875*30.875;
    kern[247] = vec2(0.535, -0.665)  * 31.000*31.000;

    kern[248] = vec2(1.0, 0.002)     * 31.125*31.125; // Very close to axes, very very far
    kern[249] = vec2(-0.002, -1.0)    * 31.250*31.250;
    kern[250] = vec2(-0.998, 0.006)  * 31.375*31.375;
    kern[251] = vec2(0.006, -0.998)  * 31.500*31.500;
    kern[252] = vec2(0.155, 0.99)     * 31.625*31.625;
    kern[253] = vec2(-0.99, -0.155)   * 31.750*31.750;
    kern[254] = vec2(-0.948, 0.052)  * 31.875*31.875;
    kern[255] = vec2(0.052, -0.948)  * 32.000*32.000; // Last sample for 256

    // --- Continuation for samples 256 to 287 ---
    kern[256] = vec2(0.985, 0.285)  * 32.125*32.125; // Even finer in-between directions, extremely far
    kern[257] = vec2(-0.285, -0.985) * 32.250*32.250;
    kern[258] = vec2(-0.719, 0.573)  * 32.375*32.375;
    kern[259] = vec2(0.573, -0.719)  * 32.500*32.500;
    kern[260] = vec2(0.81, 0.52)    * 32.625*32.625;
    kern[261] = vec2(-0.52, -0.81)    * 32.750*32.750;
    kern[262] = vec2(-0.649, 0.643)  * 32.875*32.875;
    kern[263] = vec2(0.643, -0.649)  * 33.000*33.000;

    kern[264] = vec2(1.0, 0.018)    * 33.125*33.125; // Closer to axes again, very far out
    kern[265] = vec2(-0.018, -1.0)   * 33.250*33.250;
    kern[266] = vec2(-0.982, 0.08)   * 33.375*33.375;
    kern[267] = vec2(0.08, -0.982)   * 33.500*33.500;
    kern[268] = vec2(0.39, 0.90)    * 33.625*33.625;
    kern[269] = vec2(-0.90, -0.39)   * 33.750*33.750;
    kern[270] = vec2(-0.787, 0.213)  * 33.875*33.875;
    kern[271] = vec2(0.213, -0.787)  * 34.000*34.000;

    kern[272] = vec2(0.996, 0.273)  * 34.125*34.125; // Even finer directions, extremely far
    kern[273] = vec2(-0.273, -0.996) * 34.250*34.250;
    kern[274] = vec2(-0.865, 0.435)  * 34.375*34.375;
    kern[275] = vec2(0.435, -0.865)  * 34.500*34.500;
    kern[276] = vec2(0.695, 0.705)  * 34.625*34.625;
    kern[277] = vec2(-0.705, -0.695) * 34.750*34.750;
    kern[278] = vec2(-0.663, 0.537)  * 34.875*34.875;
    kern[279] = vec2(0.537, -0.663)  * 35.000*35.000;

    kern[280] = vec2(1.0, 0.0015)   * 35.125*35.125; // Very close to axes, very very far
    kern[281] = vec2(-0.0015, -1.0)  * 35.250*35.250;
    kern[282] = vec2(-0.9985, 0.0045)* 35.375*35.375;
    kern[283] = vec2(0.0045, -0.9985)* 35.500*35.500;
    kern[284] = vec2(0.156, 0.99)   * 35.625*35.625;
    kern[285] = vec2(-0.99, -0.156)  * 35.750*35.750;
    kern[286] = vec2(-0.949, 0.051)  * 35.875*35.875;
    kern[287] = vec2(0.051, -0.949)  * 36.000*36.000;

    // --- Continuation for samples 288 to 319 ---
    kern[288] = vec2(0.987, 0.283)  * 36.125*36.125; // Even finer in-between directions, extremely far
    kern[289] = vec2(-0.283, -0.987) * 36.250*36.250;
    kern[290] = vec2(-0.7195, 0.572) * 36.375*36.375;
    kern[291] = vec2(0.572, -0.7195) * 36.500*36.500;
    kern[292] = vec2(0.805, 0.525)  * 36.625*36.625;
    kern[293] = vec2(-0.525, -0.805) * 36.750*36.750;
    kern[294] = vec2(-0.6495, 0.642) * 36.875*36.875;
    kern[295] = vec2(0.642, -0.6495) * 37.000*37.000;

    kern[296] = vec2(1.0, 0.016)    * 37.125*37.125; // Closer to axes again, very far out
    kern[297] = vec2(-0.016, -1.0)   * 37.250*37.250;
    kern[298] = vec2(-0.984, 0.07)   * 37.375*37.375;
    kern[299] = vec2(0.07, -0.984)   * 37.500*37.500;
    kern[300] = vec2(0.395, 0.895)  * 37.625*37.625;
    kern[301] = vec2(-0.895, -0.395) * 37.750*37.750;
    kern[302] = vec2(-0.788, 0.212)  * 37.875*37.875;
    kern[303] = vec2(0.212, -0.788)  * 38.000*38.000;

    kern[304] = vec2(0.997, 0.272)  * 38.125*38.125; // Even finer directions, extremely far
    kern[305] = vec2(-0.272, -0.997) * 38.250*38.250;
    kern[306] = vec2(-0.867, 0.433)  * 38.375*38.375;
    kern[307] = vec2(0.433, -0.867)  * 38.500*38.500;
    kern[308] = vec2(0.697, 0.703)  * 38.625*38.625;
    kern[309] = vec2(-0.703, -0.697) * 38.750*38.750;
    kern[310] = vec2(-0.662, 0.538)  * 38.875*38.875;
    kern[311] = vec2(0.538, -0.662)  * 39.000*39.000;

    kern[312] = vec2(1.0, 0.0012)   * 39.125*39.125; // Very close to axes, very very far
    kern[313] = vec2(-0.0012, -1.0)  * 39.250*39.250;
    kern[314] = vec2(-0.9988, 0.0036)* 39.375*39.375;
    kern[315] = vec2(0.0036, -0.9988)* 39.500*39.500;
    kern[316] = vec2(0.157, 0.99)   * 39.625*39.625;
    kern[317] = vec2(-0.99, -0.157)  * 39.750*39.750;
    kern[318] = vec2(-0.9495, 0.0505)* 39.875*39.875;
    kern[319] = vec2(0.0505, -0.9495)* 40.000*40.000;

    // --- Continuation for samples 320 to 351 ---
    kern[320] = vec2(0.988, 0.282)  * 40.125*40.125; // Even finer in-between directions, extremely far
    kern[321] = vec2(-0.282, -0.988) * 40.250*40.250;
    kern[322] = vec2(-0.7197, 0.571) * 40.375*40.375;
    kern[323] = vec2(0.571, -0.7197) * 40.500*40.500;
    kern[324] = vec2(0.802, 0.528)  * 40.625*40.625;
    kern[325] = vec2(-0.528, -0.802) * 40.750*40.750;
    kern[326] = vec2(-0.6497, 0.641) * 40.875*40.875;
    kern[327] = vec2(0.641, -0.6497) * 41.000*41.000;

    kern[328] = vec2(1.0, 0.014)    * 41.125*41.125; // Closer to axes again, very far out
    kern[329] = vec2(-0.014, -1.0)   * 41.250*41.250;
    kern[330] = vec2(-0.986, 0.06)   * 41.375*41.375;
    kern[331] = vec2(0.06, -0.986)   * 41.500*41.500;
    kern[332] = vec2(0.397, 0.893)  * 41.625*41.625;
    kern[333] = vec2(-0.893, -0.397) * 41.750*41.750;
    kern[334] = vec2(-0.7885, 0.2115)* 41.875*41.875;
    kern[335] = vec2(0.2115, -0.7885)* 42.000*42.000;

    kern[336] = vec2(0.9975, 0.271) * 42.125*42.125; // Even finer directions, extremely far
    kern[337] = vec2(-0.271, -0.9975)* 42.250*42.250;
    kern[338] = vec2(-0.868, 0.432)  * 42.375*42.375;
    kern[339] = vec2(0.432, -0.868)  * 42.500*42.500;
    kern[340] = vec2(0.698, 0.702)  * 42.625*42.625;
    kern[341] = vec2(-0.702, -0.698) * 42.750*42.750;
    kern[342] = vec2(-0.661, 0.539)  * 42.875*42.875;
    kern[343] = vec2(0.539, -0.661)  * 43.000*43.000;

    kern[344] = vec2(1.0, 0.001)    * 43.125*43.125; // Very close to axes, very very far
    kern[345] = vec2(-0.001, -1.0)   * 43.250*43.250;
    kern[346] = vec2(-0.999, 0.003) * 43.375*43.375;
    kern[347] = vec2(0.003, -0.999) * 43.500*43.500;
    kern[348] = vec2(0.1575, 0.99)  * 43.625*43.625;
    kern[349] = vec2(-0.99, -0.1575) * 43.750*43.750;
    kern[350] = vec2(-0.9497, 0.0503)* 43.875*43.875;
    kern[351] = vec2(0.0503, -0.9497)* 44.000*44.000;

    // --- Continuation for samples 352 to 383 ---
    kern[352] = vec2(0.9885, 0.2815)* 44.125*44.125; // Even finer in-between directions, extremely far
    kern[353] = vec2(-0.2815, -0.9885)*44.250*44.250;
    kern[354] = vec2(-0.7198, 0.5705)* 44.375*44.375;
    kern[355] = vec2(0.5705, -0.7198)* 44.500*44.500;
    kern[356] = vec2(0.801, 0.529)  * 44.625*44.625;
    kern[357] = vec2(-0.529, -0.801) * 44.750*44.750;
    kern[358] = vec2(-0.6498, 0.6405)* 44.875*44.875;
    kern[359] = vec2(0.6405, -0.6498)* 45.000*45.000;

    kern[360] = vec2(1.0, 0.013)    * 45.125*45.125; // Closer to axes again, very far out
    kern[361] = vec2(-0.013, -1.0)   * 45.250*45.250;
    kern[362] = vec2(-0.987, 0.055)  * 45.375*45.375;
    kern[363] = vec2(0.055, -0.987)  * 45.500*45.500;
    kern[364] = vec2(0.3975, 0.8925)* 45.625*45.625;
    kern[365] = vec2(-0.8925, -0.3975)*45.750*45.750;
    kern[366] = vec2(-0.7887, 0.2113)* 45.875*45.875;
    kern[367] = vec2(0.2113, -0.7887)* 46.000*46.000;

    kern[368] = vec2(0.9978, 0.2705)* 46.125*46.125; // Even finer directions, extremely far
    kern[369] = vec2(-0.2705, -0.9978)*46.250*46.250;
    kern[370] = vec2(-0.8685, 0.4315)* 46.375*46.375;
    kern[371] = vec2(0.4315, -0.8685)* 46.500*46.500;
    kern[372] = vec2(0.6985, 0.7015)* 46.625*46.625;
    kern[373] = vec2(-0.7015, -0.6985)*46.750*46.750;
    kern[374] = vec2(-0.6605, 0.5395)* 46.875*46.875;
    kern[375] = vec2(0.5395, -0.6605)* 47.000*47.000;

    kern[376] = vec2(1.0, 0.0008)   * 47.125*47.125; // Very close to axes, very very far
    kern[377] = vec2(-0.0008, -1.0)  * 47.250*47.250;
    kern[378] = vec2(-0.9992, 0.0024)* 47.375*47.375;
    kern[379] = vec2(0.0024, -0.9992)* 47.500*47.500;
    kern[380] = vec2(0.1578, 0.99)  * 47.625*47.625;
    kern[381] = vec2(-0.99, -0.1578) * 47.750*47.750;
    kern[382] = vec2(-0.9498, 0.0502)* 47.875*47.875;
    kern[383] = vec2(0.0502, -0.9498)* 48.000*48.000;

     // --- Continuation for samples 384 to 415 ---
    kern[384] = vec2(0.9888, 0.2812)* 48.125*48.125; // Even finer in-between directions, extremely far
    kern[385] = vec2(-0.2812, -0.9888)*48.250*48.250;
    kern[386] = vec2(-0.71985, 0.5703)*48.375*48.375;
    kern[387] = vec2(0.5703, -0.71985)*48.500*48.500;
    kern[388] = vec2(0.8005, 0.5295)* 48.625*48.625;
    kern[389] = vec2(-0.5295, -0.8005)*48.750*48.750;
    kern[390] = vec2(-0.64985, 0.6403)*48.875*48.875;
    kern[391] = vec2(0.6403, -0.64985)*49.000*49.000;

    kern[392] = vec2(1.0, 0.012)    * 49.125*49.125; // Closer to axes again, very far out
    kern[393] = vec2(-0.012, -1.0)   * 49.250*49.250;
    kern[394] = vec2(-0.988, 0.05)   * 49.375*49.375;
    kern[395] = vec2(0.05, -0.988)   * 49.500*49.500;
    kern[396] = vec2(0.398, 0.892)  * 49.625*49.625;
    kern[397] = vec2(-0.892, -0.398) * 49.750*49.750;
    kern[398] = vec2(-0.7888, 0.2112)* 49.875*49.875;
    kern[399] = vec2(0.2112, -0.7888)* 50.000*50.000;

    kern[400] = vec2(0.998, 0.2702) * 50.125*50.125; // Even finer directions, extremely far
    kern[401] = vec2(-0.2702, -0.998) *50.250*50.250;
    kern[402] = vec2(-0.8688, 0.4312)* 50.375*50.375;
    kern[403] = vec2(0.4312, -0.8688)* 50.500*50.500;
    kern[404] = vec2(0.6988, 0.7012)* 50.625*50.625;
    kern[405] = vec2(-0.7012, -0.6988)*50.750*50.750;
    kern[406] = vec2(-0.6602, 0.5398)* 50.875*50.875;
    kern[407] = vec2(0.5398, -0.6602)* 51.000*51.000;

    kern[408] = vec2(1.0, 0.0006)   * 51.125*51.125; // Very close to axes, very very far
    kern[409] = vec2(-0.0006, -1.0)  * 51.250*51.250;
    kern[410] = vec2(-0.9994, 0.0018)* 51.375*51.375;
    kern[411] = vec2(0.0018, -0.9994)* 51.500*51.500;
    kern[412] = vec2(0.158, 0.99)   * 51.625*51.625;
    kern[413] = vec2(-0.99, -0.158)  * 51.750*51.750;
    kern[414] = vec2(-0.9499, 0.0501)* 51.875*51.875;
    kern[415] = vec2(0.0501, -0.9499)* 52.000*52.000;

    // --- Continuation for samples 416 to 447 ---
    kern[416] = vec2(0.989, 0.281)  * 52.125*52.125; // Even finer in-between directions, extremely far
    kern[417] = vec2(-0.281, -0.989) * 52.250*52.250;
    kern[418] = vec2(-0.7199, 0.5701) *52.375*52.375;
    kern[419] = vec2(0.5701, -0.7199) *52.500*52.500;
    kern[420] = vec2(0.8002, 0.5298) * 52.625*52.625;
    kern[421] = vec2(-0.5298, -0.8002)* 52.750*52.750;
    kern[422] = vec2(-0.6499, 0.6401) *52.875*52.875;
    kern[423] = vec2(0.6401, -0.6499) *53.000*53.000;

    kern[424] = vec2(1.0, 0.011)    * 53.125*53.125; // Closer to axes again, very far out
    kern[425] = vec2(-0.011, -1.0)   * 53.250*53.250;
    kern[426] = vec2(-0.989, 0.045)  * 53.375*53.375;
    kern[427] = vec2(0.045, -0.989)  * 53.500*53.500;
    kern[428] = vec2(0.3985, 0.8915)* 53.625*53.625;
    kern[429] = vec2(-0.8915, -0.3985)*53.750*53.750;
    kern[430] = vec2(-0.7889, 0.2111)* 53.875*53.875;
    kern[431] = vec2(0.2111, -0.7889)* 54.000*54.000;

    kern[432] = vec2(0.9982, 0.2701)* 54.125*54.125; // Even finer directions, extremely far
    kern[433] = vec2(-0.2701, -0.9982)*54.250*54.250;
    kern[434] = vec2(-0.869, 0.431)  * 54.375*54.375;
    kern[435] = vec2(0.431, -0.869)  * 54.500*54.500;
    kern[436] = vec2(0.699, 0.701)  * 54.625*54.625;
    kern[437] = vec2(-0.701, -0.699) * 54.750*54.750;
    kern[438] = vec2(-0.6601, 0.5399)* 54.875*54.875;
    kern[439] = vec2(0.5399, -0.6601)* 55.000*55.000;

    kern[440] = vec2(1.0, 0.0004)   * 55.125*55.125; // Very close to axes, very very far
    kern[441] = vec2(-0.0004, -1.0)  * 55.250*55.250;
    kern[442] = vec2(-0.9996, 0.0012)* 55.375*55.375;
    kern[443] = vec2(0.0012, -0.9996)* 55.500*55.500;
    kern[444] = vec2(0.1582, 0.99)  * 55.625*55.625;
    kern[445] = vec2(-0.99, -0.1582) * 55.750*55.750;
    kern[446] = vec2(-0.94995, 0.05005)*55.875*55.875;
    kern[447] = vec2(0.05005, -0.94995)*56.000*56.000;

    // --- Continuation for samples 448 to 479 ---
    kern[448] = vec2(0.9892, 0.2808)* 56.125*56.125; // Even finer in-between directions, extremely far
    kern[449] = vec2(-0.2808, -0.9892)*56.250*56.250;
    kern[450] = vec2(-0.71995, 0.57005)*56.375*56.375;
    kern[451] = vec2(0.57005, -0.71995)*56.500*56.500;
    kern[452] = vec2(0.8001, 0.5299) * 56.625*56.625;
    kern[453] = vec2(-0.5299, -0.8001)* 56.750*56.750;
    kern[454] = vec2(-0.64995, 0.64005)*56.875*56.875;
    kern[455] = vec2(0.64005, -0.64995)*57.000*57.000;

    kern[456] = vec2(1.0, 0.010)    * 57.125*57.125; // Closer to axes again, very far out
    kern[457] = vec2(-0.010, -1.0)   * 57.250*57.250;
    kern[458] = vec2(-0.990, 0.04)   * 57.375*57.375;
    kern[459] = vec2(0.04, -0.990)   * 57.500*57.500;
    kern[460] = vec2(0.399, 0.891)  * 57.625*57.625;
    kern[461] = vec2(-0.891, -0.399) * 57.750*57.750;
    kern[462] = vec2(-0.78895, 0.21105)*57.875*57.875;
    kern[463] = vec2(0.21105, -0.78895)*58.000*58.000;

    kern[464] = vec2(0.9984, 0.27005)*58.125*58.125; // Even finer directions, extremely far
    kern[465] = vec2(-0.27005, -0.9984)*58.250*58.250;
    kern[466] = vec2(-0.8692, 0.4308)* 58.375*58.375;
    kern[467] = vec2(0.4308, -0.8692)* 58.500*58.500;
    kern[468] = vec2(0.6992, 0.7008)* 58.625*58.625;
    kern[469] = vec2(-0.7008, -0.6992)*58.750*58.750;
    kern[470] = vec2(-0.66005, 0.53995)*58.875*58.875;
    kern[471] = vec2(0.53995, -0.66005)*59.000*59.000;

    kern[472] = vec2(1.0, 0.0002)   * 59.125*59.125; // Very close to axes, very very far
    kern[473] = vec2(-0.0002, -1.0)  * 59.250*59.250;
    kern[474] = vec2(-0.9998, 0.0006)* 59.375*59.375;
    kern[475] = vec2(0.0006, -0.9998)* 59.500*59.500;
    kern[476] = vec2(0.1583, 0.99)  * 59.625*59.625;
    kern[477] = vec2(-0.99, -0.1583) * 59.750*59.750;
    kern[478] = vec2(-0.94998, 0.05002)*59.875*59.875;
    kern[479] = vec2(0.05002, -0.94998)*60.000*60.000;

    // --- Continuation for samples 480 to 511 --- (and the last one to reach 512)
    kern[480] = vec2(0.9893, 0.2807)* 60.125*60.125; // Even finer in-between directions, extremely far
    kern[481] = vec2(-0.2807, -0.9893)*60.250*60.250;
    kern[482] = vec2(-0.71997, 0.57003)*60.375*60.375;
    kern[483] = vec2(0.57003, -0.71997)*60.500*60.500;
    kern[484] = vec2(0.80005, 0.52995)*60.625*60.625;
    kern[485] = vec2(-0.52995, -0.80005)*60.750*60.750;
    kern[486] = vec2(-0.64997, 0.64003)*60.875*60.875;
    kern[487] = vec2(0.64003, -0.64997)*61.000*61.000;

    kern[488] = vec2(1.0, 0.009)    * 61.125*61.125; // Closer to axes again, very far out
    kern[489] = vec2(-0.009, -1.0)   * 61.250*61.250;
    kern[490] = vec2(-0.991, 0.035)  * 61.375*61.375;
    kern[491] = vec2(0.035, -0.991)  * 61.500*61.500;
    kern[492] = vec2(0.3995, 0.8905)* 61.625*61.625;
    kern[493] = vec2(-0.8905, -0.3995)*61.750*61.750;
    kern[494] = vec2(-0.78898, 0.21102)*61.875*61.875;
    kern[495] = vec2(0.21102, -0.78898)*62.000*62.000;

    kern[496] = vec2(0.9986, 0.27002)*62.125*62.125; // Even finer directions, extremely far
    kern[497] = vec2(-0.27002, -0.9986)*62.250*62.250;
    kern[498] = vec2(-0.8694, 0.4306)* 62.375*62.375;
    kern[499] = vec2(0.4306, -0.8694)* 62.500*62.500;
    kern[500] = vec2(0.6994, 0.7006)* 62.625*62.625;
    kern[501] = vec2(-0.7006, -0.6994)*62.750*62.750;
    kern[502] = vec2(-0.66002, 0.53998)*62.875*62.875;
    kern[503] = vec2(0.53998, -0.66002)*63.000*63.000;

    kern[504] = vec2(1.0, 0.0001)   * 63.125*63.125; // Very close to axes, very very far
    kern[505] = vec2(-0.0001, -1.0)  * 63.250*63.250;
    kern[506] = vec2(-0.9999, 0.0003)* 63.375*63.375;
    kern[507] = vec2(0.0003, -0.9999)* 63.500*63.500;
    kern[508] = vec2(0.1584, 0.99)  * 63.625*63.625;
    kern[509] = vec2(-0.99, -0.1584) * 63.750*63.750;
    kern[510] = vec2(-0.94999, 0.05001)*63.875*63.875;
    kern[511] = vec2(0.05001, -0.94999)*64.000*64.000; // Last sample for 512

    kern[512] = vec2(0.98935, 0.28065) * 64.125*64.125;
    kern[513] = vec2(-0.28065, -0.98935)* 64.250*64.250;
    kern[514] = vec2(-0.719975, 0.570025)* 64.375*64.375;
    kern[515] = vec2(0.570025, -0.719975)* 64.500*64.500;
    kern[516] = vec2(0.800025, 0.529975)* 64.625*64.625;
    kern[517] = vec2(-0.529975, -0.800025)* 64.750*64.750;
    kern[518] = vec2(-0.649975, 0.640025)* 64.875*64.875;
    kern[519] = vec2(0.640025, -0.649975)* 65.000*65.000;

    kern[520] = vec2(1.0, 0.008)    * 65.125*65.125;
    kern[521] = vec2(-0.008, -1.0)   * 65.250*65.250;
    kern[522] = vec2(-0.992, 0.03)   * 65.375*65.375;
    kern[523] = vec2(0.03, -0.992)   * 65.500*65.500;
    kern[524] = vec2(0.3997, 0.8903) * 65.625*65.625;
    kern[525] = vec2(-0.8903, -0.3997)* 65.750*65.750;
    kern[526] = vec2(-0.78899, 0.21101)* 65.875*65.875;
    kern[527] = vec2(0.21101, -0.78899)* 66.000*66.000;

    kern[528] = vec2(0.9894, 0.2806) * 66.125*66.125;
    kern[529] = vec2(-0.2806, -0.9894)* 66.250*66.250;
    kern[530] = vec2(-0.71998, 0.57002)* 66.375*66.375;
    kern[531] = vec2(0.57002, -0.71998)* 66.500*66.500;
    kern[532] = vec2(0.80001, 0.52999) * 66.625*66.625;
    kern[533] = vec2(-0.52999, -0.80001)* 66.750*66.750;
    kern[534] = vec2(-0.64998, 0.64002)* 66.875*66.875;
    kern[535] = vec2(0.64002, -0.64998)* 67.000*67.000;

    kern[536] = vec2(1.0, 0.007)    * 67.125*67.125;
    kern[537] = vec2(-0.007, -1.0)   * 67.250*67.250;
    kern[538] = vec2(-0.993, 0.025)   * 67.375*67.375;
    kern[539] = vec2(0.025, -0.993)   * 67.500*67.500;
    kern[540] = vec2(0.3998, 0.8902) * 67.625*67.625;
    kern[541] = vec2(-0.8902, -0.3998)* 67.750*67.750;
    kern[542] = vec2(-0.788995, 0.211005)* 67.875*67.875;
    kern[543] = vec2(0.211005, -0.788995)* 68.000*68.000;

    // --- Continuation for samples 544 to 575 ---
    kern[544] = vec2(0.98945, 0.28055) * 68.125*68.125;
    kern[545] = vec2(-0.28055, -0.98945)* 68.250*68.250;
    kern[546] = vec2(-0.719985, 0.570015)* 68.375*68.375;
    kern[547] = vec2(0.570015, -0.719985)* 68.500*68.500;
    kern[548] = vec2(0.800005, 0.529995) * 68.625*68.625;
    kern[549] = vec2(-0.529995, -0.800005)* 68.750*68.750;
    kern[550] = vec2(-0.649985, 0.640015)* 68.875*68.875;
    kern[551] = vec2(0.640015, -0.649985)* 69.000*69.000;

    kern[552] = vec2(1.0, 0.006)    * 69.125*69.125;
    kern[553] = vec2(-0.006, -1.0)   * 69.250*69.250;
    kern[554] = vec2(-0.994, 0.02)   * 69.375*69.375;
    kern[555] = vec2(0.02, -0.994)   * 69.500*69.500;
    kern[556] = vec2(0.39985, 0.89015) * 69.625*69.625;
    kern[557] = vec2(-0.89015, -0.39985)* 69.750*69.750;
    kern[558] = vec2(-0.788997, 0.211003)* 69.875*69.875;
    kern[559] = vec2(0.211003, -0.788997)* 70.000*70.000;

    kern[560] = vec2(0.98948, 0.28052) * 70.125*70.125;
    kern[561] = vec2(-0.28052, -0.98948)* 70.250*70.250;
    kern[562] = vec2(-0.719988, 0.570012)* 70.375*70.375;
    kern[563] = vec2(0.570012, -0.719988)* 70.500*70.500;
    kern[564] = vec2(0.800002, 0.529998) * 70.625*70.625;
    kern[565] = vec2(-0.529998, -0.800002)* 70.750*70.750;
    kern[566] = vec2(-0.649988, 0.640012)* 70.875*70.875;
    kern[567] = vec2(0.640012, -0.649988)* 71.000*71.000;

    kern[568] = vec2(1.0, 0.005)    * 71.125*71.125;
    kern[569] = vec2(-0.005, -1.0)   * 71.250*71.250;
    kern[570] = vec2(-0.995, 0.015)   * 71.375*71.375;
    kern[571] = vec2(0.015, -0.995)   * 71.500*71.500;
    kern[572] = vec2(0.3999, 0.8901) * 71.625*71.625;
    kern[573] = vec2(-0.8901, -0.3999)* 71.750*71.750;
    kern[574] = vec2(-0.788998, 0.211002)* 71.875*71.875;
    kern[575] = vec2(0.211002, -0.788998)* 72.000*72.000;

    // --- Continuation for samples 576 to 607 ---
    kern[576] = vec2(0.98949, 0.28051) * 72.125*72.125;
    kern[577] = vec2(-0.28051, -0.98949)* 72.250*72.250;
    kern[578] = vec2(-0.719989, 0.570011)* 72.375*72.375;
    kern[579] = vec2(0.570011, -0.719989)* 72.500*72.500;
    kern[580] = vec2(0.800001, 0.529999) * 72.625*72.625;
    kern[581] = vec2(-0.529999, -0.800001)* 72.750*72.750;
    kern[582] = vec2(-0.649989, 0.640011)* 72.875*72.875;
    kern[583] = vec2(0.640011, -0.649989)* 73.000*73.000;

    kern[584] = vec2(1.0, 0.004)    * 73.125*73.125;
    kern[585] = vec2(-0.004, -1.0)   * 73.250*73.250;
    kern[586] = vec2(-0.996, 0.012)   * 73.375*73.375;
    kern[587] = vec2(0.012, -0.996)   * 73.500*73.500;
    kern[588] = vec2(0.39993, 0.89007) * 73.625*73.625;
    kern[589] = vec2(-0.89007, -0.39993)* 73.750*73.750;
    kern[590] = vec2(-0.788999, 0.211001)* 73.875*73.875;
    kern[591] = vec2(0.211001, -0.788999)* 74.000*74.000;

    kern[592] = vec2(0.989495, 0.280505) * 74.125*74.125;
    kern[593] = vec2(-0.280505, -0.989495)* 74.250*74.250;
    kern[594] = vec2(-0.7199895, 0.5700105)* 74.375*74.375;
    kern[595] = vec2(0.5700105, -0.7199895)* 74.500*74.500;
    kern[596] = vec2(0.8000005, 0.5299995) * 74.625*74.625;
    kern[597] = vec2(-0.5299995, -0.8000005)* 74.750*74.750;
    kern[598] = vec2(-0.6499895, 0.6400105)* 74.875*74.875;
    kern[599] = vec2(0.6400105, -0.6499895)* 75.000*75.000;

    kern[600] = vec2(1.0, 0.003)    * 75.125*75.125;
    kern[601] = vec2(-0.003, -1.0)   * 75.250*75.250;
    kern[602] = vec2(-0.997, 0.009)   * 75.375*75.375;
    kern[603] = vec2(0.009, -0.997)   * 75.500*75.500;
    kern[604] = vec2(0.39995, 0.89005) * 75.625*75.625;
    kern[605] = vec2(-0.89005, -0.39995)* 75.750*75.750;
    kern[606] = vec2(-0.7889995, 0.2110005)* 75.875*75.875;
    kern[607] = vec2(0.2110005, -0.7889995)* 76.000*76.000;

    // --- Continuation for samples 608 to 639 ---
    kern[608] = vec2(0.989497, 0.280503) * 76.125*76.125;
    kern[609] = vec2(-0.280503, -0.989497)* 76.250*76.250;
    kern[610] = vec2(-0.7199897, 0.5700103)* 76.375*76.375;
    kern[611] = vec2(0.5700103, -0.7199897)* 76.500*76.500;
    kern[612] = vec2(0.8000002, 0.5299998) * 76.625*76.625;
    kern[613] = vec2(-0.5299998, -0.8000002)* 76.750*76.750;
    kern[614] = vec2(-0.6499897, 0.6400103)* 76.875*76.875;
    kern[615] = vec2(0.6400103, -0.6499897)* 77.000*77.000;

    kern[616] = vec2(1.0, 0.002)    * 77.125*77.125;
    kern[617] = vec2(-0.002, -1.0)   * 77.250*77.250;
    kern[618] = vec2(-0.998, 0.006)   * 77.375*77.375;
    kern[619] = vec2(0.006, -0.998)   * 77.500*77.500;
    kern[620] = vec2(0.39997, 0.89003) * 77.625*77.625;
    kern[621] = vec2(-0.89003, -0.39997)* 77.750*77.750;
    kern[622] = vec2(-0.7889997, 0.2110003)* 77.875*77.875;
    kern[623] = vec2(0.2110003, -0.7889997)* 78.000*78.000;

    kern[624] = vec2(0.989498, 0.280502) * 78.125*78.125;
    kern[625] = vec2(-0.280502, -0.989498)* 78.250*78.250;
    kern[626] = vec2(-0.7199898, 0.5700102)* 78.375*78.375;
    kern[627] = vec2(0.5700102, -0.7199898)* 78.500*78.500;
    kern[628] = vec2(0.8000001, 0.5299999) * 78.625*78.625;
    kern[629] = vec2(-0.5299999, -0.8000001)* 78.750*78.750;
    kern[630] = vec2(-0.6499898, 0.6400102)* 78.875*78.875;
    kern[631] = vec2(0.6400102, -0.6499898)* 79.000*79.000;

    kern[632] = vec2(1.0, 0.001)    * 79.125*79.125;
    kern[633] = vec2(-0.001, -1.0)   * 79.250*79.250;
    kern[634] = vec2(-0.999, 0.003)   * 79.375*79.375;
    kern[635] = vec2(0.003, -0.999)   * 79.500*79.500;
    kern[636] = vec2(0.39998, 0.89002) * 79.625*79.625;
    kern[637] = vec2(-0.89002, -0.39998)* 79.750*79.750;
    kern[638] = vec2(-0.7889998, 0.2110002)* 79.875*79.875;
    kern[639] = vec2(0.2110002, -0.7889998)* 80.000*80.000;

    kern[640] = vec2(0.989498, 0.280502) * 80.125*80.125;
    kern[641] = vec2(-0.280502, -0.989498)* 80.250*80.250;
    kern[642] = vec2(-0.7199898, 0.5700102)* 80.375*80.375;
    kern[643] = vec2(0.5700102, -0.7199898)* 80.500*80.500;
    kern[644] = vec2(0.8000001, 0.5299999) * 80.625*80.625;
    kern[645] = vec2(-0.5299999, -0.8000001)* 80.750*80.750;
    kern[646] = vec2(-0.6499898, 0.6400102)* 80.875*80.875;
    kern[647] = vec2(0.6400102, -0.6499898)* 81.000*81.000;

    kern[648] = vec2(1.0, 0.0009)    * 81.125*81.125;
    kern[649] = vec2(-0.0009, -1.0)   * 81.250*81.250;
    kern[650] = vec2(-0.9991, 0.0027)   * 81.375*81.375;
    kern[651] = vec2(0.0027, -0.9991)   * 81.500*81.500;
    kern[652] = vec2(0.399985, 0.890015) * 81.625*81.625;
    kern[653] = vec2(-0.890015, -0.399985)* 81.750*81.750;
    kern[654] = vec2(-0.7889999, 0.2110001)* 81.875*81.875;
    kern[655] = vec2(0.2110001, -0.7889999)* 82.000*82.000;

    kern[656] = vec2(0.9894985, 0.2805015) * 82.125*82.125;
    kern[657] = vec2(-0.2805015, -0.9894985)* 82.250*82.250;
    kern[658] = vec2(-0.71998985, 0.57001015)* 82.375*82.375;
    kern[659] = vec2(0.57001015, -0.71998985)* 82.500*82.500;
    kern[660] = vec2(0.80000005, 0.52999995) * 82.625*82.625;
    kern[661] = vec2(-0.52999995, -0.80000005)* 82.750*82.750;
    kern[662] = vec2(-0.64998985, 0.64001015)* 82.875*82.875;
    kern[663] = vec2(0.64001015, -0.64998985)* 83.000*83.000;

    kern[664] = vec2(1.0, 0.0008)    * 83.125*83.125;
    kern[665] = vec2(-0.0008, -1.0)   * 83.250*83.250;
    kern[666] = vec2(-0.9992, 0.0024)   * 83.375*83.375;
    kern[667] = vec2(0.0024, -0.9992)   * 83.500*83.500;
    kern[668] = vec2(0.399987, 0.890013) * 83.625*83.625;
    kern[669] = vec2(-0.890013, -0.399987)* 83.750*83.750;
    kern[670] = vec2(-0.78899995, 0.21100005)* 83.875*83.875;
    kern[671] = vec2(0.21100005, -0.78899995)* 84.000*84.000;

    kern[672] = vec2(0.9894985, 0.2805015) * 84.125*84.125;
    kern[673] = vec2(-0.2805015, -0.9894985)* 84.250*84.250;
    kern[674] = vec2(-0.71998985, 0.57001015)* 84.375*84.375;
    kern[675] = vec2(0.57001015, -0.71998985)* 84.500*84.500;
    kern[676] = vec2(0.80000005, 0.52999995) * 84.625*84.625;
    kern[677] = vec2(-0.52999995, -0.80000005)* 84.750*84.750;
    kern[678] = vec2(-0.64998985, 0.64001015)* 84.875*84.875;
    kern[679] = vec2(0.64001015, -0.64998985)* 85.000*85.000;

    kern[680] = vec2(1.0, 0.0007)    * 85.125*85.125;
    kern[681] = vec2(-0.0007, -1.0)   * 85.250*85.250;
    kern[682] = vec2(-0.9993, 0.0021)   * 85.375*85.375;
    kern[683] = vec2(0.0021, -0.9993)   * 85.500*85.500;
    kern[684] = vec2(0.399988, 0.890012) * 85.625*85.625;
    kern[685] = vec2(-0.890012, -0.399988)* 85.750*85.750;
    kern[686] = vec2(-0.78899997, 0.21100003)* 85.875*85.875;
    kern[687] = vec2(0.21100003, -0.78899997)* 86.000*86.000;

    kern[688] = vec2(0.9894988, 0.2805012) * 86.125*86.125;
    kern[689] = vec2(-0.2805012, -0.9894988)* 86.250*86.250;
    kern[690] = vec2(-0.71998988, 0.57001012)* 86.375*86.375;
    kern[691] = vec2(0.57001012, -0.71998988)* 86.500*86.500;
    kern[692] = vec2(0.80000002, 0.52999998) * 86.625*86.625;
    kern[693] = vec2(-0.52999998, -0.80000002)* 86.750*86.750;
    kern[694] = vec2(-0.64998988, 0.64001012)* 86.875*86.875;
    kern[695] = vec2(0.64001012, -0.64998988)* 87.000*87.000;

    kern[696] = vec2(1.0, 0.0006)    * 87.125*87.125;
    kern[697] = vec2(-0.0006, -1.0)   * 87.250*87.250;
    kern[698] = vec2(-0.9994, 0.0018)   * 87.375*87.375;
    kern[699] = vec2(0.0018, -0.9994)   * 87.500*87.500;
    kern[700] = vec2(0.399989, 0.890011) * 87.625*87.625;
    kern[701] = vec2(-0.890011, -0.399989)* 87.750*87.750;
    kern[702] = vec2(-0.78899998, 0.21100002)* 87.875*87.875;
    kern[703] = vec2(0.21100002, -0.78899998)* 88.000*88.000;

    kern[704] = vec2(0.9894988, 0.2805012) * 88.125*88.125;
    kern[705] = vec2(-0.2805012, -0.9894988)* 88.250*88.250;
    kern[706] = vec2(-0.71998988, 0.57001012)* 88.375*88.375;
    kern[707] = vec2(0.57001012, -0.71998988)* 88.500*88.500;
    kern[708] = vec2(0.80000002, 0.52999998) * 88.625*88.625;
    kern[709] = vec2(-0.52999998, -0.80000002)* 88.750*88.750;
    kern[710] = vec2(-0.64998988, 0.64001012)* 88.875*88.875;
    kern[711] = vec2(0.64001012, -0.64998988)* 89.000*89.000;

    kern[712] = vec2(1.0, 0.0005)    * 89.125*89.125;
    kern[713] = vec2(-0.0005, -1.0)   * 89.250*89.250;
    kern[714] = vec2(-0.9995, 0.0015)   * 89.375*89.375;
    kern[715] = vec2(0.0015, -0.9995)   * 89.500*89.500;
    kern[716] = vec2(0.39999, 0.89001) * 89.625*89.625;
    kern[717] = vec2(-0.89001, -0.39999)* 89.750*89.750;
    kern[718] = vec2(-0.78899999, 0.21100001)* 89.875*89.875;
    kern[719] = vec2(0.21100001, -0.78899999)* 90.000*90.000;

    kern[720] = vec2(0.989499, 0.280501) * 90.125*90.125;
    kern[721] = vec2(-0.280501, -0.989499)* 90.250*90.250;
    kern[722] = vec2(-0.7199899, 0.5700101)* 90.375*90.375;
    kern[723] = vec2(0.5700101, -0.7199899)* 90.500*90.500;
    kern[724] = vec2(0.80000001, 0.52999999) * 90.625*90.625;
    kern[725] = vec2(-0.52999999, -0.80000001)* 90.750*90.750;
    kern[726] = vec2(-0.6499899, 0.6400101)* 90.875*90.875;
    kern[727] = vec2(0.6400101, -0.6499899)* 91.000*91.000;

    kern[728] = vec2(1.0, 0.00045)    * 91.125*91.125;
    kern[729] = vec2(-0.00045, -1.0)   * 91.250*91.250;
    kern[730] = vec2(-0.99955, 0.00135)   * 91.375*91.375;
    kern[731] = vec2(0.00135, -0.99955)   * 91.500*91.500;
    kern[732] = vec2(0.399992, 0.890008) * 91.625*91.625;
    kern[733] = vec2(-0.890008, -0.399992)* 91.750*91.750;
    kern[734] = vec2(-0.788999995, 0.211000005)* 91.875*91.875;
    kern[735] = vec2(0.211000005, -0.788999995)* 92.000*92.000;

    // --- Continuation for samples 736 to 767 ---
    kern[736] = vec2(0.9894993, 0.2805007) * 92.125*92.125;
    kern[737] = vec2(-0.2805007, -0.9894993)* 92.250*92.250;
    kern[738] = vec2(-0.71998993, 0.57001007)* 92.375*92.375;
    kern[739] = vec2(0.57001007, -0.71998993)* 92.500*92.500;
    kern[740] = vec2(0.800000005, 0.529999995) * 92.625*92.625;
    kern[741] = vec2(-0.529999995, -0.800000005)* 92.750*92.750;
    kern[742] = vec2(-0.64998993, 0.64001007)* 92.875*92.875;
    kern[743] = vec2(0.64001007, -0.64998993)* 93.000*93.000;

    kern[744] = vec2(1.0, 0.0004)    * 93.125*93.125;
    kern[745] = vec2(-0.0004, -1.0)   * 93.250*93.250;
    kern[746] = vec2(-0.9996, 0.0012)   * 93.375*93.375;
    kern[747] = vec2(0.0012, -0.9996)   * 93.500*93.500;
    kern[748] = vec2(0.399994, 0.890006) * 93.625*93.625;
    kern[749] = vec2(-0.890006, -0.399994)* 93.750*93.750;
    kern[750] = vec2(-0.788999997, 0.211000003)* 93.875*93.875;
    kern[751] = vec2(0.211000003, -0.788999997)* 94.000*94.000;

    kern[752] = vec2(0.9894995, 0.2805005) * 94.125*94.125;
    kern[753] = vec2(-0.2805005, -0.9894995)* 94.250*94.250;
    kern[754] = vec2(-0.71998995, 0.57001005)* 94.375*94.375;
    kern[755] = vec2(0.57001005, -0.71998995)* 94.500*94.500;
    kern[756] = vec2(0.800000002, 0.529999998) * 94.625*94.625;
    kern[757] = vec2(-0.529999998, -0.800000002)* 94.750*94.750;
    kern[758] = vec2(-0.64998995, 0.64001005)* 94.875*94.875;
    kern[759] = vec2(0.64001005, -0.64998995)* 95.000*95.000;

    kern[760] = vec2(1.0, 0.00035)    * 95.125*95.125;
    kern[761] = vec2(-0.00035, -1.0)   * 95.250*95.250;
    kern[762] = vec2(-0.99965, 0.00105)   * 95.375*95.375;
    kern[763] = vec2(0.00105, -0.99965)   * 95.500*95.500;
    kern[764] = vec2(0.399995, 0.890005) * 95.625*95.625;
    kern[765] = vec2(-0.890005, -0.399995)* 95.750*95.750;
    kern[766] = vec2(-0.788999998, 0.211000002)* 95.875*95.875;
    kern[767] = vec2(0.211000002, -0.788999998)* 96.000*96.000;

    // --- Continuation for samples 768 to 799 ---
    kern[768] = vec2(0.9894996, 0.2805004) * 96.125*96.125;
    kern[769] = vec2(-0.2805004, -0.9894996)* 96.250*96.250;
    kern[770] = vec2(-0.71998996, 0.57001004)* 96.375*96.375;
    kern[771] = vec2(0.57001004, -0.71998996)* 96.500*96.500;
    kern[772] = vec2(0.800000001, 0.529999999) * 96.625*96.625;
    kern[773] = vec2(-0.529999999, -0.800000001)* 96.750*96.750;
    kern[774] = vec2(-0.64998996, 0.64001004)* 96.875*96.875;
    kern[775] = vec2(0.64001004, -0.64998996)* 97.000*97.000;

    kern[776] = vec2(1.0, 0.0003)    * 97.125*97.125;
    kern[777] = vec2(-0.0003, -1.0)   * 97.250*97.250;
    kern[778] = vec2(-0.9997, 0.0009)   * 97.375*97.375;
    kern[779] = vec2(0.0009, -0.9997)   * 97.500*97.500;
    kern[780] = vec2(0.399996, 0.890004) * 97.625*97.625;
    kern[781] = vec2(-0.890004, -0.399996)* 97.750*97.750;
    kern[782] = vec2(-0.788999999, 0.211000001)* 97.875*97.875;
    kern[783] = vec2(0.211000001, -0.788999999)* 98.000*98.000;

    kern[784] = vec2(0.9894997, 0.2805003) * 98.125*98.125;
    kern[785] = vec2(-0.2805003, -0.9894997)* 98.250*98.250;
    kern[786] = vec2(-0.71998997, 0.57001003)* 98.375*98.375;
    kern[787] = vec2(0.57001003, -0.71998997)* 98.500*98.500;
    kern[788] = vec2(0.8000000005, 0.5299999995) * 98.625*98.625;
    kern[789] = vec2(-0.5299999995, -0.8000000005)* 98.750*98.750;
    kern[790] = vec2(-0.64998997, 0.64001003)* 98.875*98.875;
    kern[791] = vec2(0.64001003, -0.64998997)* 99.000*99.000;

    kern[792] = vec2(1.0, 0.00025)    * 99.125*99.125;
    kern[793] = vec2(-0.00025, -1.0)   * 99.250*99.250;
    kern[794] = vec2(-0.99975, 0.00075)   * 99.375*99.375;
    kern[795] = vec2(0.00075, -0.99975)   * 99.500*99.500;
    kern[796] = vec2(0.399997, 0.890003) * 99.625*99.625;
    kern[797] = vec2(-0.890003, -0.399997)* 99.750*99.750;
    kern[798] = vec2(-0.7889999995, 0.2110000005)* 99.875*99.875;
    kern[799] = vec2(0.2110000005, -0.7889999995)* 100.000*100.000;

    // --- Continuation for samples 800 to 831 ---
    kern[800] = vec2(0.98949975, 0.28050025) * 100.125*100.125;
    kern[801] = vec2(-0.28050025, -0.98949975)* 100.250*100.250;
    kern[802] = vec2(-0.719989975, 0.570010025)* 100.375*100.375;
    kern[803] = vec2(0.570010025, -0.719989975)* 100.500*100.500;
    kern[804] = vec2(0.8000000002, 0.5299999998) * 100.625*100.625;
    kern[805] = vec2(-0.5299999998, -0.8000000002)* 100.750*100.750;
    kern[806] = vec2(-0.649989975, 0.640010025)* 100.875*100.875;
    kern[807] = vec2(0.640010025, -0.649989975)* 101.000*101.000;

    kern[808] = vec2(1.0, 0.0002)    * 101.125*101.125;
    kern[809] = vec2(-0.0002, -1.0)   * 101.250*101.250;
    kern[810] = vec2(-0.9998, 0.0006)   * 101.375*101.375;
    kern[811] = vec2(0.0006, -0.9998)   * 101.500*101.500;
    kern[812] = vec2(0.399998, 0.890002) * 101.625*101.625;
    kern[813] = vec2(-0.890002, -0.399998)* 101.750*101.750;
    kern[814] = vec2(-0.7889999998, 0.2110000002)* 101.875*101.875;
    kern[815] = vec2(0.2110000002, -0.7889999998)* 102.000*102.000;

    kern[816] = vec2(0.9894998, 0.2805002) * 102.125*102.125;
    kern[817] = vec2(-0.2805002, -0.9894998)* 102.250*102.250;
    kern[818] = vec2(-0.71998998, 0.57001002)* 102.375*102.375;
    kern[819] = vec2(0.57001002, -0.71998998)* 102.500*102.500;
    kern[820] = vec2(0.8000000001, 0.5299999999) * 102.625*102.625;
    kern[821] = vec2(-0.5299999999, -0.8000000001)* 102.750*102.750;
    kern[822] = vec2(-0.64998998, 0.64001002)* 102.875*102.875;
    kern[823] = vec2(0.64001002, -0.64998998)* 103.000*103.000;

    kern[824] = vec2(1.0, 0.00015)    * 103.125*103.125;
    kern[825] = vec2(-0.00015, -1.0)   * 103.250*103.250;
    kern[826] = vec2(-0.99985, 0.00045)   * 103.375*103.375;
    kern[827] = vec2(0.00045, -0.99985)   * 103.500*103.500;
    kern[828] = vec2(0.3999985, 0.8900015) * 103.625*103.625;
    kern[829] = vec2(-0.8900015, -0.3999985)* 103.750*103.750;
    kern[830] = vec2(-0.7889999999, 0.2110000001)* 103.875*103.875;
    kern[831] = vec2(0.2110000001, -0.7889999999)* 104.000*104.000;

    // --- Continuation for samples 832 to 863 ---
    kern[832] = vec2(0.98949985, 0.28050015) * 104.125*104.125;
    kern[833] = vec2(-0.28050015, -0.98949985)* 104.250*104.250;
    kern[834] = vec2(-0.719989985, 0.570010015)* 104.375*104.375;
    kern[835] = vec2(0.570010015, -0.719989985)* 104.500*104.500;
    kern[836] = vec2(0.80000000005, 0.52999999995) * 104.625*104.625;
    kern[837] = vec2(-0.52999999995, -0.80000000005)* 104.750*104.750;
    kern[838] = vec2(-0.649989985, 0.640010015)* 104.875*104.875;
    kern[839] = vec2(0.640010015, -0.649989985)* 105.000*105.000;

    kern[840] = vec2(1.0, 0.0001)    * 105.125*105.125;
    kern[841] = vec2(-0.0001, -1.0)   * 105.250*105.250;
    kern[842] = vec2(-0.9999, 0.0003)   * 105.375*105.375;
    kern[843] = vec2(0.0003, -0.9999)   * 105.500*105.500;
    kern[844] = vec2(0.399999, 0.890001) * 105.625*105.625;
    kern[845] = vec2(-0.890001, -0.399999)* 105.750*105.750;
    kern[846] = vec2(-0.78899999995, 0.21100000005)* 105.875*105.875;
    kern[847] = vec2(0.21100000005, -0.78899999995)* 106.000*106.000;

    kern[848] = vec2(0.9894999, 0.2805001) * 106.125*106.125;
    kern[849] = vec2(-0.2805001, -0.9894999)* 106.250*106.250;
    kern[850] = vec2(-0.71998999, 0.57001001)* 106.375*106.375;
    kern[851] = vec2(0.57001001, -0.71998999)* 106.500*106.500;
    kern[852] = vec2(0.80000000001, 0.52999999999) * 106.625*106.625;
    kern[853] = vec2(-0.52999999999, -0.80000000001)* 106.750*106.750;
    kern[854] = vec2(-0.64998999, 0.64001001)* 106.875*106.875;
    kern[855] = vec2(0.64001001, -0.64998999)* 107.000*107.000;

    kern[856] = vec2(1.0, 0.00005)    * 107.125*107.125;
    kern[857] = vec2(-0.00005, -1.0)   * 107.250*107.250;
    kern[858] = vec2(-0.99995, 0.00015)   * 107.375*107.375;
    kern[859] = vec2(0.00015, -0.99995)   * 107.500*107.500;
    kern[860] = vec2(0.3999995, 0.8900005) * 107.625*107.625;
    kern[861] = vec2(-0.8900005, -0.3999995)* 107.750*107.750;
    kern[862] = vec2(-0.78899999998, 0.21100000002)* 107.875*107.875;
    kern[863] = vec2(0.21100000002, -0.78899999998)* 108.000*108.000;

    // --- Continuation for samples 864 to 895 ---
    kern[864] = vec2(0.98949995, 0.28050005) * 108.125*108.125;
    kern[865] = vec2(-0.28050005, -0.98949995)* 108.250*108.250;
    kern[866] = vec2(-0.719989995, 0.570010005)* 108.375*108.375;
    kern[867] = vec2(0.570010005, -0.719989995)* 108.500*108.500;
    kern[868] = vec2(0.800000000005, 0.529999999995) * 108.625*108.625;
    kern[869] = vec2(-0.529999999995, -0.800000000005)* 108.750*108.750;
    kern[870] = vec2(-0.649989995, 0.640010005)* 108.875*108.875;
    kern[871] = vec2(0.640010005, -0.649989995)* 109.000*109.000;

    kern[872] = vec2(1.0, 0.00001)    * 109.125*109.125;
    kern[873] = vec2(-0.00001, -1.0)   * 109.250*109.250;
    kern[874] = vec2(-0.99999, 0.00003)   * 109.375*109.375;
    kern[875] = vec2(0.00003, -0.99999)   * 109.500*109.500;
    kern[876] = vec2(0.3999998, 0.8900002) * 109.625*109.625;
    kern[877] = vec2(-0.8900002, -0.3999998)* 109.750*109.750;
    kern[878] = vec2(-0.788999999995, 0.211000000005)* 109.875*109.875;
    kern[879] = vec2(0.211000000005, -0.788999999995)* 110.000*110.000;

    kern[880] = vec2(0.98949998, 0.28050002) * 110.125*110.125;
    kern[881] = vec2(-0.28050002, -0.98949998)* 110.250*110.250;
    kern[882] = vec2(-0.719989998, 0.570010002)* 110.375*110.375;
    kern[883] = vec2(0.570010002, -0.719989998)* 110.500*110.500;
    kern[884] = vec2(0.800000000001, 0.529999999999) * 110.625*110.625;
    kern[885] = vec2(-0.529999999999, -0.800000000001)* 110.750*110.750;
    kern[886] = vec2(-0.649989998, 0.640010002)* 110.875*110.875;
    kern[887] = vec2(0.640010002, -0.649989998)* 111.000*111.000;

    kern[888] = vec2(1.0, 0.000005)    * 111.125*111.125;
    kern[889] = vec2(-0.000005, -1.0)   * 111.250*111.250;
    kern[890] = vec2(-0.999995, 0.000015)   * 111.375*111.375;
    kern[891] = vec2(0.000015, -0.999995)   * 111.500*111.500;
    kern[892] = vec2(0.3999999, 0.8900001) * 111.625*111.625;
    kern[893] = vec2(-0.8900001, -0.3999999)* 111.750*111.750;
    kern[894] = vec2(-0.788999999998, 0.211000000002)* 111.875*111.875;
    kern[895] = vec2(0.211000000002, -0.788999999998)* 112.000*112.000;

    // --- Continuation for samples 896 to 927 ---
    kern[896] = vec2(0.98949999, 0.28050001) * 112.125*112.125;
    kern[897] = vec2(-0.28050001, -0.98949999)* 112.250*112.250;
    kern[898] = vec2(-0.719989999, 0.570010001)* 112.375*112.375;
    kern[899] = vec2(0.570010001, -0.719989999)* 112.500*112.500;
    kern[900] = vec2(0.8000000000005, 0.5299999999995) * 112.625*112.625;
    kern[901] = vec2(-0.5299999999995, -0.8000000000005)* 112.750*112.750;
    kern[902] = vec2(-0.649989999, 0.640010001)* 112.875*112.875;
    kern[903] = vec2(0.640010001, -0.649989999)* 113.000*113.000;

    kern[904] = vec2(1.0, 0.000001)    * 113.125*113.125;
    kern[905] = vec2(-0.000001, -1.0)   * 113.250*113.250;
    kern[906] = vec2(-0.999999, 0.000003)   * 113.375*113.375;
    kern[907] = vec2(0.000003, -0.999999)   * 113.500*113.500;
    kern[908] = vec2(0.39999995, 0.89000005) * 113.625*113.625;
    kern[909] = vec2(-0.89000005, -0.39999995)* 113.750*113.750;
    kern[910] = vec2(-0.7889999999995, 0.2110000000005)* 113.875*113.875;
    kern[911] = vec2(0.2110000000005, -0.7889999999995)* 114.000*114.000;

    kern[912] = vec2(0.989499995, 0.280500005) * 114.125*114.125;
    kern[913] = vec2(-0.280500005, -0.989499995)* 114.250*114.250;
    kern[914] = vec2(-0.7199899995, 0.5700100005)* 114.375*114.375;
    kern[915] = vec2(0.5700100005, -0.7199899995)* 114.500*114.500;
    kern[916] = vec2(0.8000000000001, 0.5299999999999) * 114.625*114.625;
    kern[917] = vec2(-0.5299999999999, -0.8000000000001)* 114.750*114.750;
    kern[918] = vec2(-0.6499899995, 0.6400100005)* 114.875*114.875;
    kern[919] = vec2(0.6400100005, -0.6499899995)* 115.000*115.000;

    kern[920] = vec2(1.0, 0.0000005)    * 115.125*115.125;
    kern[921] = vec2(-0.0000005, -1.0)   * 115.250*115.250;
    kern[922] = vec2(-0.9999995, 0.0000015)   * 115.375*115.375;
    kern[923] = vec2(0.0000015, -0.9999995)   * 115.500*115.500;
    kern[924] = vec2(0.39999997, 0.89000003) * 115.625*115.625;
    kern[925] = vec2(-0.89000003, -0.39999997)* 115.750*115.750;
    kern[926] = vec2(-0.7889999999998, 0.2110000000002)* 115.875*115.875;
    kern[927] = vec2(0.2110000000002, -0.7889999999998)* 116.000*116.000;

    // --- Continuation for samples 928 to 959 ---
    kern[928] = vec2(0.989499997, 0.280500003) * 116.125*116.125;
    kern[929] = vec2(-0.280500003, -0.989499997)* 116.250*116.250;
    kern[930] = vec2(-0.7199899997, 0.5700100003)* 116.375*116.375;
    kern[931] = vec2(0.5700100003, -0.7199899997)* 116.500*116.500;
    kern[932] = vec2(0.80000000000005, 0.52999999999995) * 116.625*116.625;
    kern[933] = vec2(-0.52999999999995, -0.80000000000005)* 116.750*116.750;
    kern[934] = vec2(-0.6499899997, 0.6400100003)* 116.875*116.875;
    kern[935] = vec2(0.6400100003, -0.6499899997)* 117.000*117.000;

    kern[936] = vec2(1.0, 0.0000001)    * 117.125*117.125;
    kern[937] = vec2(-0.0000001, -1.0)   * 117.250*117.250;
    kern[938] = vec2(-0.9999999, 0.0000003)   * 117.375*117.375;
    kern[939] = vec2(0.0000003, -0.9999999)   * 117.500*117.500;
    kern[940] = vec2(0.39999999, 0.89000001) * 117.625*117.625;
    kern[941] = vec2(-0.89000001, -0.39999999)* 117.750*117.750;
    kern[942] = vec2(-0.78899999999995, 0.21100000000005)* 117.875*117.875;
    kern[943] = vec2(0.21100000000005, -0.78899999999995)* 118.000*118.000;

    kern[944] = vec2(0.989499998, 0.280500002) * 118.125*118.125;
    kern[945] = vec2(-0.280500002, -0.989499998)* 118.250*118.250;
    kern[946] = vec2(-0.7199899998, 0.5700100002)* 118.375*118.375;
    kern[947] = vec2(0.5700100002, -0.7199899998)* 118.500*118.500;
    kern[948] = vec2(0.80000000000001, 0.52999999999999) * 118.625*118.625;
    kern[949] = vec2(-0.52999999999999, -0.80000000000001)* 118.750*118.750;
    kern[950] = vec2(-0.6499899998, 0.6400100002)* 118.875*118.875;
    kern[951] = vec2(0.6400100002, -0.6499899998)* 119.000*119.000;

    kern[952] = vec2(1.0, 0.00000005)    * 119.125*119.125;
    kern[953] = vec2(-0.00000005, -1.0)   * 119.250*119.250;
    kern[954] = vec2(-0.99999995, 0.00000015)   * 119.375*119.375;
    kern[955] = vec2(0.00000015, -0.99999995)   * 119.500*119.500;
    kern[956] = vec2(0.399999995, 0.890000005) * 119.625*119.625;
    kern[957] = vec2(-0.890000005, -0.399999995)* 119.750*119.750;
    kern[958] = vec2(-0.78899999999998, 0.21100000000002)* 119.875*119.875;
    kern[959] = vec2(0.21100000000002, -0.78899999999998)* 120.000*120.000;

    // --- Continuation for samples 960 to 991 ---
    kern[960] = vec2(0.989499999, 0.280500001) * 120.125*120.125;
    kern[961] = vec2(-0.280500001, -0.989499999)* 120.250*120.250;
    kern[962] = vec2(-0.7199899999, 0.5700100001)* 120.375*120.375;
    kern[963] = vec2(0.5700100001, -0.7199899999)* 120.500*120.500;
    kern[964] = vec2(0.800000000000005, 0.529999999999995) * 120.625*120.625;
    kern[965] = vec2(-0.529999999999995, -0.800000000000005)* 120.750*120.750;
    kern[966] = vec2(-0.6499899999, 0.6400100001)* 120.875*120.875;
    kern[967] = vec2(0.6400100001, -0.6499899999)* 121.000*121.000;

    kern[968] = vec2(1.0, 0.00000001)    * 121.125*121.125;
    kern[969] = vec2(-0.00000001, -1.0)   * 121.250*121.250;
    kern[970] = vec2(-0.99999999, 0.00000003)   * 121.375*121.375;
    kern[971] = vec2(0.00000003, -0.99999999)   * 121.500*121.500;
    kern[972] = vec2(0.399999995, 0.890000005) * 121.625*121.625;
    kern[973] = vec2(-0.890000005, -0.399999995)* 121.750*121.750;
    kern[974] = vec2(-0.78899999999998, 0.21100000000002)* 121.875*121.875;
    kern[975] = vec2(0.21100000000002, -0.78899999999998)* 122.000*122.000;

    kern[976] = vec2(0.9894999995, 0.2805000005) * 122.125*122.125;
    kern[977] = vec2(-0.2805000005, -0.9894999995)* 122.250*122.250;
    kern[978] = vec2(-0.71998999995, 0.57001000005)* 122.375*122.375;
    kern[979] = vec2(0.57001000005, -0.71998999995)* 122.500*122.500;
    kern[980] = vec2(0.800000000000001, 0.529999999999999) * 122.625*122.625;
    kern[981] = vec2(-0.529999999999999, -0.800000000000001)* 122.750*122.750;
    kern[982] = vec2(-0.64998999995, 0.64001000005)* 122.875*122.875;
    kern[983] = vec2(0.64001000005, -0.64998999995)* 123.000*123.000;

    kern[984] = vec2(1.0, 0.000000005)    * 123.125*123.125;
    kern[985] = vec2(-0.000000005, -1.0)   * 123.250*123.250;
    kern[986] = vec2(-0.999999995, 0.000000015)   * 123.375*123.375;
    kern[987] = vec2(0.000000015, -0.999999995)   * 123.500*123.500;
    kern[988] = vec2(0.3999999997, 0.8900000003) * 123.625*123.625;
    kern[989] = vec2(-0.8900000003, -0.3999999997)* 123.750*123.750;
    kern[990] = vec2(-0.788999999999995, 0.211000000000005)* 123.875*123.875;
    kern[991] = vec2(0.211000000000005, -0.788999999999995)* 124.000*124.000;

    kern[992] = vec2(0.9894999997, 0.2805000003) * 124.125*124.125;
    kern[993] = vec2(-0.2805000003, -0.9894999997)* 124.250*124.250;
    kern[994] = vec2(-0.71998999997, 0.57001000003)* 124.375*124.375;
    kern[995] = vec2(0.57001000003, -0.71998999997)* 124.500*124.500;
    kern[996] = vec2(0.8000000000000005, 0.5299999999999995) * 124.625*124.625;
    kern[997] = vec2(-0.5299999999999995, -0.8000000000000005)* 124.750*124.750;
    kern[998] = vec2(-0.64998999997, 0.64001000003)* 124.875*124.875;
    kern[999] = vec2(0.64001000003, -0.64998999997)* 125.000*125.000;

    kern[1000] = vec2(1.0, 0.000000001)    * 125.125*125.125;
    kern[1001] = vec2(-0.000000001, -1.0)   * 125.250*125.250;
    kern[1002] = vec2(-0.9999999999, 0.000000003)   * 125.375*125.375;
    kern[1003] = vec2(0.000000003, -0.9999999999)   * 125.500*125.500;
    kern[1004] = vec2(0.39999999995, 0.89000000005) * 125.625*125.625;
    kern[1005] = vec2(-0.89000000005, -0.39999999995)* 125.750*125.750;
    kern[1006] = vec2(-0.7889999999999995, 0.2110000000000005)* 125.875*125.875;
    kern[1007] = vec2(0.2110000000000005, -0.7889999999999995)* 126.000*126.000;

    kern[1008] = vec2(0.98949999995, 0.28050000005) * 126.125*126.125;
    kern[1009] = vec2(-0.28050000005, -0.98949999995)* 126.250*126.250;
    kern[1010] = vec2(-0.719989999995, 0.570010000005)* 126.375*126.375;
    kern[1011] = vec2(0.570010000005, -0.719989999995)* 126.500*126.500;
    kern[1012] = vec2(0.8000000000000001, 0.5299999999999999) * 126.625*126.625;
    kern[1013] = vec2(-0.5299999999999999, -0.8000000000000001)* 126.750*126.750;
    kern[1014] = vec2(-0.649989999995, 0.640010000005)* 126.875*126.875;
    kern[1015] = vec2(0.640010000005, -0.649989999995)* 127.000*127.000;

    kern[1016] = vec2(1.0, 0.0000000005)    * 127.125*127.125;
    kern[1017] = vec2(-0.0000000005, -1.0)   * 127.250*127.250;
    kern[1018] = vec2(-0.99999999995, 0.0000000015)   * 127.375*127.375;
    kern[1019] = vec2(0.0000000015, -0.99999999995)   * 127.500*127.500;
    kern[1020] = vec2(0.399999999995, 0.890000000005) * 127.625*127.625;
    kern[1021] = vec2(-0.890000000005, -0.399999999995)* 127.750*127.750;
    kern[1022] = vec2(-0.7889999999999999, 0.2110000000000001)* 127.875*127.875;
    kern[1023] = vec2(0.2110000000000001, -0.7889999999999999)* 128.000*128.000; // Last sample for 1024


    return kern[i] / screen_res; // Assuming screen_res is defined elsewhere. If not, remove this division.
}

//calculate decreases in ambient lighting when crowded out (SSAO)
float calcAmbientOcclusion(vec4 pos, vec3 norm, vec2 pos_screen)
{
    float ret = 1.0;
    vec3 pos_world = pos.xyz;
    vec2 noise_reflect = texture(noiseMap, pos_screen.xy * (screen_res / 128)).xy;

    float angle_hidden = 0.0;
    float points = 0;

    float scale = min(ssao_radius / -pos_world.z, ssao_max_radius);

    // it was found that keeping # of samples a constant was the fastest, probably due to compiler optimizations (unrolling?) 
	for (int i = 0; i < ssao_sample_count; i++) // <FS:WWeaver> Use SSAO sample count uniform to control loop iterations
    {
        vec2 samppos_screen = pos_screen + scale * reflect(getKern(i), noise_reflect);
        vec3 samppos_world = getPositionAo(samppos_screen).xyz;

        vec3 diff = pos_world - samppos_world;
        float dist2 = dot(diff, diff);

        // assume each sample corresponds to an occluding sphere with constant radius, constant x-sectional area
        // --> solid angle shrinking by the square of distance
        //radius is somewhat arbitrary, can approx with just some constant k * 1 / dist^2
        //(k should vary inversely with # of samples, but this is taken care of later)

        float funky_val = (dot((samppos_world - 0.05*norm - pos_world), norm) > 0.0) ? 1.0 : 0.0;
        angle_hidden = angle_hidden + funky_val * min(1.0/dist2, ssao_factor_inv);

        // 'blocked' samples (significantly closer to camera relative to pos_world) are "no data", not "no occlusion"
        float diffz_val = (diff.z > -1.0) ? 1.0 : 0.0;
        points = points + diffz_val;
    }

    angle_hidden = min(ssao_factor*angle_hidden/points, 1.0);

    float points_val = (points > 0.0) ? 1.0 : 0.0;
    ret = (1.0 - (points_val * angle_hidden));

    ret = max(ret, 0.0);
    return min(ret, 1.0);
}

